{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","src","concat","friend","email","alt","name","CardList","friends","map","card_component","key","id","SearchBox","_ref","placeholder","handleSearch","type","onChange","getFriends","Object","asyncToGenerator","regenerator_default","mark","_callee","url","callback","response","wrap","_context","prev","next","fetch","sent","json","stop","_x","_x2","apply","this","arguments","getSearch","search","filter","toLowerCase","includes","App","_useState","useState","_useState2","slicedToArray","setFriends","_useState3","_useState4","setSearch","_useState5","_useState6","searchResult","setSearchResult","useEffect","search_box_component","e","target","value","card_list_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SAWeA,qBARF,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAAMO,OAAOC,MAAvC,0BAAsEC,IAAG,GAAAH,OAAKN,EAAMO,OAAOG,QAClGT,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,OAAOG,MAClBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMO,OAAOC,UCGLG,EANE,SAAAX,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbJ,EAAMY,QAAQC,IAAI,SAAAN,GAAM,OAAIN,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKR,EAAOS,GAAIT,OAAQA,QCM9CU,SATG,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OACjBnB,EAAAC,EAAAC,cAAA,SACCkB,KAAK,SACLjB,UAAS,aACTe,YAAaA,EACbG,SAAUF,MCHNG,EAAU,eAAAL,EAAAM,OAAAC,EAAA,EAAAD,CAAAE,EAAAxB,EAAAyB,KAAG,SAAAC,EAAOC,EAAKC,GAAZ,IAAAC,EAAAnB,EAAA,OAAAc,EAAAxB,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACMC,MAAMP,GADZ,cACXE,EADWE,EAAAI,KAAAJ,EAAAE,KAAA,EAEKJ,EAASO,OAFd,OAEX1B,EAFWqB,EAAAI,KAIjBP,EAASlB,GAJQ,wBAAAqB,EAAAM,SAAAX,MAAH,gBAAAY,EAAAC,GAAA,OAAAvB,EAAAwB,MAAAC,KAAAC,YAAA,GAOVC,EAAY,SAACC,EAAQlC,GAAT,OAAqBA,EAAQmC,OAAO,SAAAxC,GAAM,OAAIA,EAAOG,KAAKsC,cAAcC,SAASH,EAAOE,kBA2B3FE,MAzBf,WAAe,IAAAC,EACiBC,mBAAS,IAD1BC,EAAA7B,OAAA8B,EAAA,EAAA9B,CAAA2B,EAAA,GACNvC,EADMyC,EAAA,GACGE,EADHF,EAAA,GAAAG,EAEeJ,mBAAS,IAFxBK,EAAAjC,OAAA8B,EAAA,EAAA9B,CAAAgC,EAAA,GAENV,EAFMW,EAAA,GAEEC,EAFFD,EAAA,GAAAE,EAG2BP,mBAAS,IAHpCQ,EAAApC,OAAA8B,EAAA,EAAA9B,CAAAmC,EAAA,GAGNE,EAHMD,EAAA,GAGQE,EAHRF,EAAA,GAab,OARAG,oBAAU,WACRxC,EAAU,6CAA+CgC,IACxD,IAEHQ,oBAAU,WACRD,EAAgBjB,EAAUC,EAAQlC,KACjC,CAACkC,EAAQlC,IAGVX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAC6D,EAAD,CACE7C,YAAY,gBACZC,aAAc,SAAA6C,GAAC,OAAIP,EAAUO,EAAEC,OAAOC,UAExClE,EAAAC,EAAAC,cAACiE,EAAD,CAAUxD,QAASiD,MCtBLQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.16288d81.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\n\r\nconst Card = props => (\r\n\t<div className=\"card-container\">\r\n\t\t<img src={`https://robohash.org/${props.friend.email}?set=set5&size=180x180`} alt={`${props.friend.name}`} />\r\n\t  <h2>{props.friend.name}</h2>\r\n\t  <p>{props.friend.email}</p>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\nimport \"./card-list.style.css\";\r\nimport Card from '../card/card.component';\r\n\r\nconst CardList = props => (\r\n\t<div className=\"card-list\">\r\n\t\t{props.friends.map(friend => <Card key={friend.id} friend={friend} />)}\r\n\t</div>\r\n);\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './search-box.style.css';\r\n\r\nconst SearchBox = ({placeholder, handleSearch}) => (\r\n\t<input\r\n\t\ttype=\"search\"\r\n\t\tclassName={`search-box`}\r\n\t\tplaceholder={placeholder}\r\n\t\tonChange={handleSearch}\r\n\t/>\r\n);\r\n\r\nexport default SearchBox;","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.css\";\r\nimport CardList from './components/card-list/card-list.component';\r\nimport SearchBox from './components/search-box/search-box.component';\r\n\r\nconst getFriends = async (url, callback) => {\r\n  const response = await fetch(url);\r\n  const friends = await response.json();\r\n\r\n  callback(friends);\r\n};\r\n\r\nconst getSearch = (search, friends) => friends.filter(friend => friend.name.toLowerCase().includes(search.toLowerCase()));\r\n\r\nfunction App() {\r\n  const [friends, setFriends] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  const [searchResult, setSearchResult] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getFriends(`https://jsonplaceholder.typicode.com/users`, setFriends);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setSearchResult(getSearch(search, friends));\r\n  }, [search, friends]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Friends Rolodex</h1>\r\n      <SearchBox\r\n        placeholder=\"Search Friend\"\r\n        handleSearch={e => setSearch(e.target.value)}\r\n      />\r\n      <CardList friends={searchResult} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}